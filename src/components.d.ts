/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Coordinate, CurrentSelection, SequenceSGRNAHit, SGRNAForOneEntry, } from "./components/result-page/interfaces";
export namespace Components {
    interface CircularBarplot {
        "gene_coordinates"?: Coordinate[];
        "genome_size": number;
        "list_coordinates": number[];
        "selected_sgrna_coordinates": string[];
    }
    interface CircularBarplotLegend {
        "gene"?: boolean;
    }
    interface GenomicCard2 {
        "changeOrganism": (org: string) => void;
        "changeRef": (ref: string) => void;
        "changeSgrna": (sgrna: string) => void;
        "changeSgrnaSubset": (sgrna_subset: string[]) => void;
        "current_genes": {
            start: number;
            end: number;
        }[];
        "current_references": string[];
        "current_sgrnas": SGRNAForOneEntry[];
        "diagonal_svg": number;
        "hidden_references": string[];
        "initial_sgrnas"?: SGRNAForOneEntry[];
        "onClickHighlight": () => void;
        "organisms": string[];
        "selected": CurrentSelection;
    }
    interface LinearCard {
        "all_sgrna": string;
        "gene": string;
        "nb_step": string;
        "onClose"?: () => void;
        "width_bar": string;
        "width_div": string;
    }
    interface OccurencesGraph {
        "occurences_data": {
            name: string;
            coords_count: number;
        }[];
    }
    interface ResultPage {
        "all_data": string;
        "complete_data": string;
        "fasta_metadata": string;
        "gene"?: string;
        "org_names": string;
    }
    interface TableCrispr {
        "complete_data": SequenceSGRNAHit[];
        "gene": boolean;
        "onOrganismClick"?: (organism: string, sgrna: string) => void;
        "selected": CurrentSelection;
        "shouldHighlight": boolean;
    }
}
declare global {
    interface HTMLCircularBarplotElement extends Components.CircularBarplot, HTMLStencilElement {
    }
    var HTMLCircularBarplotElement: {
        prototype: HTMLCircularBarplotElement;
        new (): HTMLCircularBarplotElement;
    };
    interface HTMLCircularBarplotLegendElement extends Components.CircularBarplotLegend, HTMLStencilElement {
    }
    var HTMLCircularBarplotLegendElement: {
        prototype: HTMLCircularBarplotLegendElement;
        new (): HTMLCircularBarplotLegendElement;
    };
    interface HTMLGenomicCard2Element extends Components.GenomicCard2, HTMLStencilElement {
    }
    var HTMLGenomicCard2Element: {
        prototype: HTMLGenomicCard2Element;
        new (): HTMLGenomicCard2Element;
    };
    interface HTMLLinearCardElement extends Components.LinearCard, HTMLStencilElement {
    }
    var HTMLLinearCardElement: {
        prototype: HTMLLinearCardElement;
        new (): HTMLLinearCardElement;
    };
    interface HTMLOccurencesGraphElement extends Components.OccurencesGraph, HTMLStencilElement {
    }
    var HTMLOccurencesGraphElement: {
        prototype: HTMLOccurencesGraphElement;
        new (): HTMLOccurencesGraphElement;
    };
    interface HTMLResultPageElement extends Components.ResultPage, HTMLStencilElement {
    }
    var HTMLResultPageElement: {
        prototype: HTMLResultPageElement;
        new (): HTMLResultPageElement;
    };
    interface HTMLTableCrisprElement extends Components.TableCrispr, HTMLStencilElement {
    }
    var HTMLTableCrisprElement: {
        prototype: HTMLTableCrisprElement;
        new (): HTMLTableCrisprElement;
    };
    interface HTMLElementTagNameMap {
        "circular-barplot": HTMLCircularBarplotElement;
        "circular-barplot-legend": HTMLCircularBarplotLegendElement;
        "genomic-card2": HTMLGenomicCard2Element;
        "linear-card": HTMLLinearCardElement;
        "occurences-graph": HTMLOccurencesGraphElement;
        "result-page": HTMLResultPageElement;
        "table-crispr": HTMLTableCrisprElement;
    }
}
declare namespace LocalJSX {
    interface CircularBarplot {
        "gene_coordinates"?: Coordinate[];
        "genome_size"?: number;
        "list_coordinates"?: number[];
        "selected_sgrna_coordinates"?: string[];
    }
    interface CircularBarplotLegend {
        "gene"?: boolean;
    }
    interface GenomicCard2 {
        "changeOrganism"?: (org: string) => void;
        "changeRef"?: (ref: string) => void;
        "changeSgrna"?: (sgrna: string) => void;
        "changeSgrnaSubset"?: (sgrna_subset: string[]) => void;
        "current_genes"?: {
            start: number;
            end: number;
        }[];
        "current_references"?: string[];
        "current_sgrnas"?: SGRNAForOneEntry[];
        "diagonal_svg"?: number;
        "hidden_references"?: string[];
        "initial_sgrnas"?: SGRNAForOneEntry[];
        "onClickHighlight"?: () => void;
        "onGenomic-card.button-click"?: (event: CustomEvent<any>) => void;
        "onGenomic-card.coordinate-out"?: (event: CustomEvent<any>) => void;
        "onGenomic-card.coordinate-over"?: (event: CustomEvent<any>) => void;
        "organisms"?: string[];
        "selected"?: CurrentSelection;
    }
    interface LinearCard {
        "all_sgrna"?: string;
        "gene"?: string;
        "nb_step"?: string;
        "onClose"?: () => void;
        "width_bar"?: string;
        "width_div"?: string;
    }
    interface OccurencesGraph {
        "occurences_data"?: {
            name: string;
            coords_count: number;
        }[];
    }
    interface ResultPage {
        "all_data"?: string;
        "complete_data"?: string;
        "fasta_metadata"?: string;
        "gene"?: string;
        "org_names"?: string;
    }
    interface TableCrispr {
        "complete_data"?: SequenceSGRNAHit[];
        "gene"?: boolean;
        "onOrganismClick"?: (organism: string, sgrna: string) => void;
        "onTable-crispr.org-click"?: (event: CustomEvent<any>) => void;
        "selected"?: CurrentSelection;
        "shouldHighlight"?: boolean;
    }
    interface IntrinsicElements {
        "circular-barplot": CircularBarplot;
        "circular-barplot-legend": CircularBarplotLegend;
        "genomic-card2": GenomicCard2;
        "linear-card": LinearCard;
        "occurences-graph": OccurencesGraph;
        "result-page": ResultPage;
        "table-crispr": TableCrispr;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "circular-barplot": LocalJSX.CircularBarplot & JSXBase.HTMLAttributes<HTMLCircularBarplotElement>;
            "circular-barplot-legend": LocalJSX.CircularBarplotLegend & JSXBase.HTMLAttributes<HTMLCircularBarplotLegendElement>;
            "genomic-card2": LocalJSX.GenomicCard2 & JSXBase.HTMLAttributes<HTMLGenomicCard2Element>;
            "linear-card": LocalJSX.LinearCard & JSXBase.HTMLAttributes<HTMLLinearCardElement>;
            "occurences-graph": LocalJSX.OccurencesGraph & JSXBase.HTMLAttributes<HTMLOccurencesGraphElement>;
            "result-page": LocalJSX.ResultPage & JSXBase.HTMLAttributes<HTMLResultPageElement>;
            "table-crispr": LocalJSX.TableCrispr & JSXBase.HTMLAttributes<HTMLTableCrisprElement>;
        }
    }
}
